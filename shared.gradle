
repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = "Ladysnake Libs"
        url = 'https://maven.ladysnake.org/releases'
    }
    maven { url 'https://maven.wispforest.io' }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    //Arrp to generate resources during runtime
    modImplementation("maven.modrinth:arrp:${project.arrp_version}")

    //add owo config as config loader
    modImplementation "io.wispforest:owo-lib:${project.owo_version}"
    annotationProcessor modImplementation("io.wispforest:owo-lib:${project.owo_version}")

    //add numismatic overhaul as compile only to create the TradeBuilder
    modCompileOnly("maven.modrinth:numismatic-overhaul:${project.numismatic_version}")
    modCompileOnly("maven.modrinth:patchouli:${project.patchouli_version}")
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.ext.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.ext.minecraft_version,
                "loader_version": project.loader_version
    }
}

base{
    archivesName = project.archives_base_name
    version = project.mod_version+"+"+project.ext.minecraft_version
    group = project.maven_group
}

sourceSets {
    main {
        java {
            srcDirs '../src/main/java'
            srcDirs "../src/${project.ver_str}/java"
        }
        resources {
            srcDirs '../src/main/resources'
            srcDirs "../src/${project.ver_str}/resources"
        }
    }
}

loom {
    accessWidenerPath = file("../src/${project.ver_str}/resources/sakuralib.accesswidener")
}

javadoc {
    options.optionFiles(file("javadoc.options"))
    source = sourceSets.main.allJava
}

jar {
    from("LICENSE") {
        rename { "${it}_${base.archivesName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

